'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var keys = {
  down: 'ArrowDown',
  enter: 'Enter',
  up: 'ArrowUp'
};

var InputCompletion = (function (_Component) {
  _inherits(InputCompletion, _Component);

  function InputCompletion(props) {
    _classCallCheck(this, InputCompletion);

    _get(Object.getPrototypeOf(InputCompletion.prototype), 'constructor', this).call(this, props);

    this.state = {
      inputWidth: null, // fallback only
      selectedSuggestion: 0, // fallback only
      showSuggestions: false, // fallback only
      shownOptions: [], // fallback only
      value: ''
    };
  }

  _createClass(InputCompletion, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var newState = {
        nativeSupport: this._supportsNative()
      };

      if (!newState.nativeSupport) {
        newState.inputWidth = (0, _react.findDOMNode)(this.refs.input).offsetWidth + 'px';
      }

      this.setState(newState);
    }
  }, {
    key: '_supportsNative',
    value: function _supportsNative() {
      var feature = document.createElement('datalist');
      return Boolean(feature && feature.options);
    }
  }, {
    key: '_isOptionShown',
    value: function _isOptionShown(input, option) {
      var optionRegex = new RegExp(input, 'gi');

      return input && option.match(optionRegex);
    }
  }, {
    key: '_getFallbackContainerStyles',
    value: function _getFallbackContainerStyles() {
      return {
        display: this.state.showSuggestions && this.state.value ? 'block' : 'none',
        width: this.state.inputWidth
      };
    }
  }, {
    key: '_renderFallbackOptions',
    value: function _renderFallbackOptions() {
      var _this = this;

      var options = this.state.shownOptions.map(function (option, index) {
        var isSelected = index === _this.state.selectedSuggestion;
        var onMouseDown = _this.onFallbackOptionClick.bind(_this, option);

        return _react2['default'].createElement(
          'li',
          { 'aria-selected': isSelected, className: 'ric-fb-option', key: index, onMouseDown: onMouseDown, role: 'option' },
          option
        );
      });

      return _react2['default'].createElement(
        'ul',
        { 'aria-multiselectable': 'false', className: 'ric-fb-options', role: 'listbox', style: this._getFallbackContainerStyles() },
        options
      );
    }
  }, {
    key: '_renderOptions',
    value: function _renderOptions() {
      if (!this.state.nativeSupport) {
        return this._renderFallbackOptions();
      }

      var options = this.props.options.map(function (option, index) {
        return _react2['default'].createElement('option', { key: index, value: option });
      });

      return _react2['default'].createElement(
        'datalist',
        { id: this.props.name },
        options
      );
    }
  }, {
    key: '_renderChildren',
    value: function _renderChildren() {
      var child = _react.Children.only(this.props.children);
      var props = {
        list: this.props.name,
        onBlur: this.onBlur.bind(this),
        onChange: this.onChange.bind(this),
        ref: 'input',
        value: this.state.value
      };

      if (!this.state.nativeSupport) {
        props.onKeyDown = this.onKeyDown.bind(this);
      }

      return (0, _react.cloneElement)(child, props);
    }
  }, {
    key: 'onKeyDown',
    value: function onKeyDown(event) {
      var key = event.key;
      var _state = this.state;
      var selectedSuggestion = _state.selectedSuggestion;
      var shownOptions = _state.shownOptions;

      var nextIndex = selectedSuggestion;

      switch (key) {
        case keys.down:
          var maxIndex = shownOptions.length - 1;
          nextIndex = selectedSuggestion === maxIndex ? maxIndex : selectedSuggestion + 1;
          break;
        case keys.up:
          nextIndex = selectedSuggestion <= 0 ? 0 : selectedSuggestion - 1;
          break;
        case keys.enter:
          this.onFallbackOptionClick(shownOptions[selectedSuggestion]);
          break;
        default:
          return;
      }

      this.setState({ selectedSuggestion: nextIndex });
    }
  }, {
    key: 'onFallbackOptionClick',
    value: function onFallbackOptionClick(option) {
      this.setState({ showSuggestions: false, value: option });
    }
  }, {
    key: 'onBlur',
    value: function onBlur() {
      this.setState({ showSuggestions: false });
    }
  }, {
    key: 'onChange',
    value: function onChange(event) {
      var _this2 = this;

      var value = event.target.value;

      var newState = { value: value };

      if (!this.state.nativeSupport) {
        newState.selectedSuggestion = 0;
        newState.showSuggestions = true;
        newState.shownOptions = this.props.options.filter(function (option) {
          return _this2._isOptionShown(value, option);
        });
      }

      this.setState(newState);

      if (this.props.onValueChange) {
        this.props.onValueChange(event, value);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2['default'].createElement(
        'section',
        null,
        this._renderChildren(),
        this._renderOptions()
      );
    }
  }]);

  return InputCompletion;
})(_react.Component);

exports['default'] = InputCompletion;

InputCompletion.propTypes = {
  children: _react.PropTypes.element.isRequired,
  name: _react.PropTypes.string.isRequired,
  onValueChange: _react.PropTypes.func,
  options: _react.PropTypes.arrayOf(_react.PropTypes.string.isRequired).isRequired
};
module.exports = exports['default'];
